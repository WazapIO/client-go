/*
WhatsAPI Go

The V2 of WhatsAPI Go

API version: 2.0
Contact: manjit@sponsorbook.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package WhatsAPI

import (
	"encoding/json"
)

// FileUpload struct for FileUpload
type FileUpload struct {
	DirectPath string `json:"direct_path"`
	FileEncSha256 []int32 `json:"file_enc_sha256"`
	FileLength int32 `json:"file_length"`
	FileSha256 []int32 `json:"file_sha256"`
	MediaKey []int32 `json:"media_key"`
	MimeType string `json:"mime_type"`
	Url string `json:"url"`
}

// NewFileUpload instantiates a new FileUpload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileUpload(directPath string, fileEncSha256 []int32, fileLength int32, fileSha256 []int32, mediaKey []int32, mimeType string, url string) *FileUpload {
	this := FileUpload{}
	this.DirectPath = directPath
	this.FileEncSha256 = fileEncSha256
	this.FileLength = fileLength
	this.FileSha256 = fileSha256
	this.MediaKey = mediaKey
	this.MimeType = mimeType
	this.Url = url
	return &this
}

// NewFileUploadWithDefaults instantiates a new FileUpload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileUploadWithDefaults() *FileUpload {
	this := FileUpload{}
	return &this
}

// GetDirectPath returns the DirectPath field value
func (o *FileUpload) GetDirectPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DirectPath
}

// GetDirectPathOk returns a tuple with the DirectPath field value
// and a boolean to check if the value has been set.
func (o *FileUpload) GetDirectPathOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DirectPath, true
}

// SetDirectPath sets field value
func (o *FileUpload) SetDirectPath(v string) {
	o.DirectPath = v
}

// GetFileEncSha256 returns the FileEncSha256 field value
func (o *FileUpload) GetFileEncSha256() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.FileEncSha256
}

// GetFileEncSha256Ok returns a tuple with the FileEncSha256 field value
// and a boolean to check if the value has been set.
func (o *FileUpload) GetFileEncSha256Ok() ([]int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.FileEncSha256, true
}

// SetFileEncSha256 sets field value
func (o *FileUpload) SetFileEncSha256(v []int32) {
	o.FileEncSha256 = v
}

// GetFileLength returns the FileLength field value
func (o *FileUpload) GetFileLength() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FileLength
}

// GetFileLengthOk returns a tuple with the FileLength field value
// and a boolean to check if the value has been set.
func (o *FileUpload) GetFileLengthOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.FileLength, true
}

// SetFileLength sets field value
func (o *FileUpload) SetFileLength(v int32) {
	o.FileLength = v
}

// GetFileSha256 returns the FileSha256 field value
func (o *FileUpload) GetFileSha256() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.FileSha256
}

// GetFileSha256Ok returns a tuple with the FileSha256 field value
// and a boolean to check if the value has been set.
func (o *FileUpload) GetFileSha256Ok() ([]int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.FileSha256, true
}

// SetFileSha256 sets field value
func (o *FileUpload) SetFileSha256(v []int32) {
	o.FileSha256 = v
}

// GetMediaKey returns the MediaKey field value
func (o *FileUpload) GetMediaKey() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.MediaKey
}

// GetMediaKeyOk returns a tuple with the MediaKey field value
// and a boolean to check if the value has been set.
func (o *FileUpload) GetMediaKeyOk() ([]int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.MediaKey, true
}

// SetMediaKey sets field value
func (o *FileUpload) SetMediaKey(v []int32) {
	o.MediaKey = v
}

// GetMimeType returns the MimeType field value
func (o *FileUpload) GetMimeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value
// and a boolean to check if the value has been set.
func (o *FileUpload) GetMimeTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.MimeType, true
}

// SetMimeType sets field value
func (o *FileUpload) SetMimeType(v string) {
	o.MimeType = v
}

// GetUrl returns the Url field value
func (o *FileUpload) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *FileUpload) GetUrlOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *FileUpload) SetUrl(v string) {
	o.Url = v
}

func (o FileUpload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["direct_path"] = o.DirectPath
	}
	if true {
		toSerialize["file_enc_sha256"] = o.FileEncSha256
	}
	if true {
		toSerialize["file_length"] = o.FileLength
	}
	if true {
		toSerialize["file_sha256"] = o.FileSha256
	}
	if true {
		toSerialize["media_key"] = o.MediaKey
	}
	if true {
		toSerialize["mime_type"] = o.MimeType
	}
	if true {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableFileUpload struct {
	value *FileUpload
	isSet bool
}

func (v NullableFileUpload) Get() *FileUpload {
	return v.value
}

func (v *NullableFileUpload) Set(val *FileUpload) {
	v.value = val
	v.isSet = true
}

func (v NullableFileUpload) IsSet() bool {
	return v.isSet
}

func (v *NullableFileUpload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileUpload(val *FileUpload) *NullableFileUpload {
	return &NullableFileUpload{value: val, isSet: true}
}

func (v NullableFileUpload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileUpload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


