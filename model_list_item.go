/*
WhatsAPI Go

The V2 of WhatsAPI Go

API version: 2.0
Contact: manjit@sponsorbook.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package WhatsAPI

import (
	"encoding/json"
)

// ListItem struct for ListItem
type ListItem struct {
	Description *string `json:"description,omitempty"`
	RowId *string `json:"row_id,omitempty"`
	Title string `json:"title"`
}

// NewListItem instantiates a new ListItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListItem(title string) *ListItem {
	this := ListItem{}
	this.Title = title
	return &this
}

// NewListItemWithDefaults instantiates a new ListItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListItemWithDefaults() *ListItem {
	this := ListItem{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ListItem) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListItem) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ListItem) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ListItem) SetDescription(v string) {
	o.Description = &v
}

// GetRowId returns the RowId field value if set, zero value otherwise.
func (o *ListItem) GetRowId() string {
	if o == nil || isNil(o.RowId) {
		var ret string
		return ret
	}
	return *o.RowId
}

// GetRowIdOk returns a tuple with the RowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListItem) GetRowIdOk() (*string, bool) {
	if o == nil || isNil(o.RowId) {
    return nil, false
	}
	return o.RowId, true
}

// HasRowId returns a boolean if a field has been set.
func (o *ListItem) HasRowId() bool {
	if o != nil && !isNil(o.RowId) {
		return true
	}

	return false
}

// SetRowId gets a reference to the given string and assigns it to the RowId field.
func (o *ListItem) SetRowId(v string) {
	o.RowId = &v
}

// GetTitle returns the Title field value
func (o *ListItem) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ListItem) GetTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ListItem) SetTitle(v string) {
	o.Title = v
}

func (o ListItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.RowId) {
		toSerialize["row_id"] = o.RowId
	}
	if true {
		toSerialize["title"] = o.Title
	}
	return json.Marshal(toSerialize)
}

type NullableListItem struct {
	value *ListItem
	isSet bool
}

func (v NullableListItem) Get() *ListItem {
	return v.value
}

func (v *NullableListItem) Set(val *ListItem) {
	v.value = val
	v.isSet = true
}

func (v NullableListItem) IsSet() bool {
	return v.isSet
}

func (v *NullableListItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListItem(val *ListItem) *NullableListItem {
	return &NullableListItem{value: val, isSet: true}
}

func (v NullableListItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


