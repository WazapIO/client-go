/*
WhatsAPI Go

The V2 of WhatsAPI Go

API version: 2.0
Contact: manjit@sponsorbook.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package WhatsAPI

import (
	"encoding/json"
)

// TemplateButton struct for TemplateButton
type TemplateButton struct {
	// Make sure this is unique
	ButtonId *string `json:"button_id,omitempty"`
	Payload *string `json:"payload,omitempty"`
	Title string `json:"title"`
	// Valid types are replyButton, urlButton & callButton
	Type string `json:"type"`
}

// NewTemplateButton instantiates a new TemplateButton object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateButton(title string, type_ string) *TemplateButton {
	this := TemplateButton{}
	this.Title = title
	this.Type = type_
	return &this
}

// NewTemplateButtonWithDefaults instantiates a new TemplateButton object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateButtonWithDefaults() *TemplateButton {
	this := TemplateButton{}
	return &this
}

// GetButtonId returns the ButtonId field value if set, zero value otherwise.
func (o *TemplateButton) GetButtonId() string {
	if o == nil || isNil(o.ButtonId) {
		var ret string
		return ret
	}
	return *o.ButtonId
}

// GetButtonIdOk returns a tuple with the ButtonId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateButton) GetButtonIdOk() (*string, bool) {
	if o == nil || isNil(o.ButtonId) {
    return nil, false
	}
	return o.ButtonId, true
}

// HasButtonId returns a boolean if a field has been set.
func (o *TemplateButton) HasButtonId() bool {
	if o != nil && !isNil(o.ButtonId) {
		return true
	}

	return false
}

// SetButtonId gets a reference to the given string and assigns it to the ButtonId field.
func (o *TemplateButton) SetButtonId(v string) {
	o.ButtonId = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *TemplateButton) GetPayload() string {
	if o == nil || isNil(o.Payload) {
		var ret string
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateButton) GetPayloadOk() (*string, bool) {
	if o == nil || isNil(o.Payload) {
    return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *TemplateButton) HasPayload() bool {
	if o != nil && !isNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given string and assigns it to the Payload field.
func (o *TemplateButton) SetPayload(v string) {
	o.Payload = &v
}

// GetTitle returns the Title field value
func (o *TemplateButton) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *TemplateButton) GetTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *TemplateButton) SetTitle(v string) {
	o.Title = v
}

// GetType returns the Type field value
func (o *TemplateButton) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TemplateButton) GetTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TemplateButton) SetType(v string) {
	o.Type = v
}

func (o TemplateButton) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ButtonId) {
		toSerialize["button_id"] = o.ButtonId
	}
	if !isNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableTemplateButton struct {
	value *TemplateButton
	isSet bool
}

func (v NullableTemplateButton) Get() *TemplateButton {
	return v.value
}

func (v *NullableTemplateButton) Set(val *TemplateButton) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateButton) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateButton) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateButton(val *TemplateButton) *NullableTemplateButton {
	return &NullableTemplateButton{value: val, isSet: true}
}

func (v NullableTemplateButton) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateButton) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


