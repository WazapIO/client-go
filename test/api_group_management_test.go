/*
WhatsAPI Go

Testing GroupManagementApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_GroupManagementApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test GroupManagementApiService InstancesInstanceKeyGroupsAdminGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.GroupManagementApi.InstancesInstanceKeyGroupsAdminGet(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GroupManagementApiService InstancesInstanceKeyGroupsCreatePost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.GroupManagementApi.InstancesInstanceKeyGroupsCreatePost(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GroupManagementApiService InstancesInstanceKeyGroupsGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.GroupManagementApi.InstancesInstanceKeyGroupsGet(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GroupManagementApiService InstancesInstanceKeyGroupsGroupIdAnnouncePut", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string
        var announce bool
        var groupId string

        resp, httpRes, err := apiClient.GroupManagementApi.InstancesInstanceKeyGroupsGroupIdAnnouncePut(context.Background(), instanceKey, announce, groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GroupManagementApiService InstancesInstanceKeyGroupsGroupIdDelete", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string
        var groupId string

        resp, httpRes, err := apiClient.GroupManagementApi.InstancesInstanceKeyGroupsGroupIdDelete(context.Background(), instanceKey, groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GroupManagementApiService InstancesInstanceKeyGroupsGroupIdDescriptionPut", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string
        var groupId string

        resp, httpRes, err := apiClient.GroupManagementApi.InstancesInstanceKeyGroupsGroupIdDescriptionPut(context.Background(), instanceKey, groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GroupManagementApiService InstancesInstanceKeyGroupsGroupIdGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string
        var groupId string

        resp, httpRes, err := apiClient.GroupManagementApi.InstancesInstanceKeyGroupsGroupIdGet(context.Background(), instanceKey, groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GroupManagementApiService InstancesInstanceKeyGroupsGroupIdInviteCodeGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string
        var groupId string

        resp, httpRes, err := apiClient.GroupManagementApi.InstancesInstanceKeyGroupsGroupIdInviteCodeGet(context.Background(), instanceKey, groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GroupManagementApiService InstancesInstanceKeyGroupsGroupIdLockPut", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string
        var locked bool
        var groupId string

        resp, httpRes, err := apiClient.GroupManagementApi.InstancesInstanceKeyGroupsGroupIdLockPut(context.Background(), instanceKey, locked, groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GroupManagementApiService InstancesInstanceKeyGroupsGroupIdNamePut", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string
        var groupId string

        resp, httpRes, err := apiClient.GroupManagementApi.InstancesInstanceKeyGroupsGroupIdNamePut(context.Background(), instanceKey, groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GroupManagementApiService InstancesInstanceKeyGroupsGroupIdParticipantsAddPost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string
        var groupId string

        resp, httpRes, err := apiClient.GroupManagementApi.InstancesInstanceKeyGroupsGroupIdParticipantsAddPost(context.Background(), instanceKey, groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GroupManagementApiService InstancesInstanceKeyGroupsGroupIdParticipantsDemotePut", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string
        var groupId string

        resp, httpRes, err := apiClient.GroupManagementApi.InstancesInstanceKeyGroupsGroupIdParticipantsDemotePut(context.Background(), instanceKey, groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GroupManagementApiService InstancesInstanceKeyGroupsGroupIdParticipantsPromotePut", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string
        var groupId string

        resp, httpRes, err := apiClient.GroupManagementApi.InstancesInstanceKeyGroupsGroupIdParticipantsPromotePut(context.Background(), instanceKey, groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GroupManagementApiService InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string
        var groupId string

        resp, httpRes, err := apiClient.GroupManagementApi.InstancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete(context.Background(), instanceKey, groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GroupManagementApiService InstancesInstanceKeyGroupsGroupIdProfilePicPut", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string
        var groupId string

        resp, httpRes, err := apiClient.GroupManagementApi.InstancesInstanceKeyGroupsGroupIdProfilePicPut(context.Background(), instanceKey, groupId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GroupManagementApiService InstancesInstanceKeyGroupsInviteInfoGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.GroupManagementApi.InstancesInstanceKeyGroupsInviteInfoGet(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
