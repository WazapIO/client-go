/*
WhatsAPI Go

Testing InstanceApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_InstanceApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test InstanceApiService InstancesCreateGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.InstanceApi.InstancesCreateGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InstanceApiService InstancesInstanceKeyContactsGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.InstanceApi.InstancesInstanceKeyContactsGet(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InstanceApiService InstancesInstanceKeyDeleteDelete", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.InstanceApi.InstancesInstanceKeyDeleteDelete(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InstanceApiService InstancesInstanceKeyGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.InstanceApi.InstancesInstanceKeyGet(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InstanceApiService InstancesInstanceKeyLogoutDelete", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.InstanceApi.InstancesInstanceKeyLogoutDelete(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InstanceApiService InstancesInstanceKeyQrcodeGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.InstanceApi.InstancesInstanceKeyQrcodeGet(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InstanceApiService InstancesInstanceKeyWebhookPut", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.InstanceApi.InstancesInstanceKeyWebhookPut(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test InstanceApiService InstancesListGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.InstanceApi.InstancesListGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
