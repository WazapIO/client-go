/*
WhatsAPI Go

Testing MessageSendingApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_MessageSendingApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test MessageSendingApiService InstancesInstanceKeyBusinessCatalogGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.MessageSendingApi.InstancesInstanceKeyBusinessCatalogGet(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MessageSendingApiService InstancesInstanceKeySendAudioPost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.MessageSendingApi.InstancesInstanceKeySendAudioPost(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MessageSendingApiService InstancesInstanceKeySendButtonMediaPost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.MessageSendingApi.InstancesInstanceKeySendButtonMediaPost(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MessageSendingApiService InstancesInstanceKeySendButtonsPost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.MessageSendingApi.InstancesInstanceKeySendButtonsPost(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MessageSendingApiService InstancesInstanceKeySendContactPost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.MessageSendingApi.InstancesInstanceKeySendContactPost(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MessageSendingApiService InstancesInstanceKeySendDocumentPost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.MessageSendingApi.InstancesInstanceKeySendDocumentPost(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MessageSendingApiService InstancesInstanceKeySendImagePost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.MessageSendingApi.InstancesInstanceKeySendImagePost(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MessageSendingApiService InstancesInstanceKeySendListPost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.MessageSendingApi.InstancesInstanceKeySendListPost(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MessageSendingApiService InstancesInstanceKeySendLocationPost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.MessageSendingApi.InstancesInstanceKeySendLocationPost(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MessageSendingApiService InstancesInstanceKeySendMediaPost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.MessageSendingApi.InstancesInstanceKeySendMediaPost(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MessageSendingApiService InstancesInstanceKeySendPollPost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.MessageSendingApi.InstancesInstanceKeySendPollPost(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MessageSendingApiService InstancesInstanceKeySendTemplateMediaPost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.MessageSendingApi.InstancesInstanceKeySendTemplateMediaPost(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MessageSendingApiService InstancesInstanceKeySendTemplatePost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.MessageSendingApi.InstancesInstanceKeySendTemplatePost(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MessageSendingApiService InstancesInstanceKeySendTextPost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.MessageSendingApi.InstancesInstanceKeySendTextPost(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MessageSendingApiService InstancesInstanceKeySendUploadPost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.MessageSendingApi.InstancesInstanceKeySendUploadPost(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test MessageSendingApiService InstancesInstanceKeySendVideoPost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceKey string

        resp, httpRes, err := apiClient.MessageSendingApi.InstancesInstanceKeySendVideoPost(context.Background(), instanceKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
